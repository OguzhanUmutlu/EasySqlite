require("fs").existsSync("./dt.sqlite") ? require("fs").unlinkSync("./dt.sqlite") : null;
// remove sqlite file if exists

const EasyDatabase = require("./EasyDatabase");
const db = new EasyDatabase("dt");
const {IntegerColumn, BigColumn, NullColumn, RealColumn, StringColumn, WhereCondition} = EasyDatabase;



////////////////////////////////////////////////////////////////////////////////
////////////////////////////// CREATING TABLES /////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

db.createTable("myTable", [
    new IntegerColumn("id", true, null, true, true), // they can create column like that
    new StringColumn("name", true),
    new IntegerColumn.TinyIntegerColumn("age", true)
]);


// NOTE: Tiny int is from 0 to 127


// it can also be like that!

db.createTable("otherTable", [
    new IntegerColumn({
        name: "id",
        isNotNull: true,
        def: null, // default* (null = no default value, because it has auto increment so no need)
        isPrimaryKey: true,
        autoIncrement: true
    }),
    new StringColumn({
        name: "name",
        isNotNull: true
    }),
    new IntegerColumn.TinyIntegerColumn({
        name: "age",
        isNotNull: true
    })
]);





////////////////////////////////////////////////////////////////////////////////
/////////////////////////////// PUSHING ROWS ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

db.push("myTable", {
    name: "John",
    age: 17
});

db.push("myTable", {
    name: "Jack",
    age: 18
});





////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// GET METHOD ////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

const JohnData = db.get("myTable", [
    new WhereCondition(
        "name",
        WhereCondition.EQUALS,
        "John"
    )
])[0];
console.log(JohnData); // { "id": 1, "name": "John", "age": 17 }





////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// SET METHOD ////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

db.set("myTable", [
    new WhereCondition(
        "name",
        WhereCondition.EQUALS,
        "John"
    )
], "name", "NewJohn");
// now John's name is NewJohn in his row





////////////////////////////////////////////////////////////////////////////////
/////////////////////////////// FETCH TABLE ////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

const myTable = db.fetchTable("myTable");
console.log(myTable);
/*
[
    {
        "id": 1,
        "name": "NewJohn",
        "age": 17
    },
    {
        "id": 2,
        "name": "Jack",
        "age": 18
    }
]
*/





////////////////////////////////////////////////////////////////////////////////
/////////////////////////////// REMOVING ROW ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

db.removeRow("myTable", [
    new WhereCondition(
        "name",
        WhereCondition.EQUALS,
        "Jack"
    )
]); // removed Jack's row





////////////////////////////////////////////////////////////////////////////////
////////////////////////////// REMOVING TABLE //////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

db.removeTable("myTable"); // removed table

// *rest in peace brand new myTable*